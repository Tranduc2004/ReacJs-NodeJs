const Order = require("../models/Order");
const { Product } = require("../models/products");
const Cart = require("../models/cart");
const User = require("../models/user");
const mongoose = require("mongoose");
const axios = require("axios");
const Voucher = require("../models/Voucher");
const UserVoucher = require("../models/UserVoucher");
const transporter = require("../config/email");

// H√†m g·ª≠i email x√°c nh·∫≠n ƒë∆°n h√†ng
const sendOrderConfirmationEmail = async (order, user) => {
  try {
    // T√≠nh to√°n l·∫°i t·ªïng ti·ªÅn d·ª±a tr√™n gi√° th·ª±c t·∫ø c·ªßa t·ª´ng s·∫£n ph·∫©m
    let calculatedTotal = 0;

    const mailOptions = {
      from: process.env.EMAIL_USER,
      to: user.email,
      subject: "X√°c nh·∫≠n ƒë∆°n h√†ng th√†nh c√¥ng - Bacola",
      html: `
        <div style="font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto; padding: 20px; border-radius: 8px; box-shadow: 0 2px 10px rgba(0,0,0,0.1); background-color: #ffffff;">
          <!-- Logo and Header -->
          <div style="display: flex; align-items: center; margin-bottom: 20px; padding-bottom: 20px; border-bottom: 1px solid #eee;">
            <div style="height: 48px; width: 48px; background-color: yellow; border-radius: 50%; display: flex; align-items: center; justify-content: center; margin-right: 10px; text-align: center; line-height: 1;">
              <span style="font-size: 24px; display: flex; align-items: center; justify-content: center; height: 100%; width: 100%; margin-top:10px; margin-left:10px;">üòÄ</span>
            </div>
            <div>
              <h1 style="margin: 0; font-size: 24px; font-weight: bold; color: #00aaff;">Bacola</h1>
              <p style="margin: 0; font-size: 12px; color: #777;">Online Grocery Shopping Center</p>
            </div>
          </div>

          <!-- Email Content -->
          <h2 style="color: #00aaff; margin-top: 0;">X√°c nh·∫≠n ƒë∆°n h√†ng th√†nh c√¥ng</h2>
          <p>Xin ch√†o ${user.name},</p>
          <p>C·∫£m ∆°n b·∫°n ƒë√£ ƒë·∫∑t h√†ng t·∫°i c·ª≠a h√†ng c·ªßa ch√∫ng t√¥i. D∆∞·ªõi ƒë√¢y l√† th√¥ng tin chi ti·∫øt ƒë∆°n h√†ng c·ªßa b·∫°n:</p>
          
          <!-- Order Info -->
          <div style="background-color: #f8f9fa; padding: 15px; border-radius: 5px; margin: 15px 0;">
            <p style="margin: 5px 0;"><strong>M√£ ƒë∆°n h√†ng:</strong> ${
              order._id
            }</p>
            <p style="margin: 5px 0;"><strong>Ng√†y ƒë·∫∑t:</strong> ${new Date(
              order.createdAt
            ).toLocaleString("vi-VN")}</p>
            <p style="margin: 5px 0;"><strong>Ph∆∞∆°ng th·ª©c thanh to√°n:</strong> ${
              order.paymentMethod === "COD"
                ? "Thanh to√°n khi nh·∫≠n h√†ng"
                : "Momo"
            }</p>
          </div>

          <!-- Products Table -->
          <h3 style="color: #00aaff;">Chi ti·∫øt s·∫£n ph·∫©m:</h3>
          <table style="width: 100%; border-collapse: collapse; margin: 15px 0;">
            <tr style="background-color: #f8f9fa;">
              <th style="padding: 10px; text-align: left; border-bottom: 2px solid #ddd;">S·∫£n ph·∫©m</th>
              <th style="padding: 10px; text-align: right; border-bottom: 2px solid #ddd;">S·ªë l∆∞·ª£ng</th>
              <th style="padding: 10px; text-align: right; border-bottom: 2px solid #ddd;">ƒê∆°n gi√°</th>
              <th style="padding: 10px; text-align: right; border-bottom: 2px solid #ddd;">Th√†nh ti·ªÅn</th>
            </tr>
            ${(() => {
              let itemsHtml = "";
              let subtotal = 0;

              order.items.forEach((item) => {
                // L·∫•y th√¥ng tin s·∫£n ph·∫©m
                // N·∫øu item.product ƒë√£ ƒë∆∞·ª£c populated ƒë·∫ßy ƒë·ªß
                if (item.product && typeof item.product === "object") {
                  const productName = item.product.name || "Kh√¥ng x√°c ƒë·ªãnh";
                  const originalPrice = item.product.price || 0;
                  const discount = item.product.discount || 0;

                  // L·∫•y gi√° sau gi·∫£m t·ª´ discountedPrice n·∫øu c√≥, n·∫øu kh√¥ng th√¨ t·ª± t√≠nh
                  let discountedPrice =
                    typeof item.product.discountedPrice !== "undefined"
                      ? item.product.discountedPrice
                      : originalPrice * (1 - discount / 100);

                  // Kh√¥ng l√†m tr√≤n gi√° ƒë·ªÉ gi·ªØ nguy√™n gi√° g·ªëc trong c∆° s·ªü d·ªØ li·ªáu

                  // C·ªông v√†o t·ªïng ti·ªÅn
                  const lineTotal = discountedPrice * item.quantity;
                  subtotal += lineTotal;

                  itemsHtml += `
                      <tr>
                        <td style="padding: 10px; border-bottom: 1px solid #eee;">${productName}</td>
                        <td style="padding: 10px; border-bottom: 1px solid #eee; text-align: right;">${
                          item.quantity
                        }</td>
                        <td style="padding: 10px; border-bottom: 1px solid #eee; text-align: right;">
                          ${
                            discount > 0
                              ? `<span style=\"text-decoration: line-through; color: #888;\">${originalPrice.toLocaleString(
                                  "vi-VN"
                                )}ƒë</span><br><span style=\"color: #ed174a; font-weight: bold;\">${discountedPrice.toLocaleString(
                                  "vi-VN"
                                )}ƒë</span>`
                              : `${originalPrice.toLocaleString("vi-VN")}ƒë`
                          }
                        </td>
                        <td style="padding: 10px; border-bottom: 1px solid #eee; text-align: right;">
                          ${lineTotal.toLocaleString("vi-VN")}ƒë
                        </td>
                      </tr>
                    `;
                } else {
                  // S·ª≠ d·ª•ng th√¥ng tin t·ª´ item (tr∆∞·ªùng h·ª£p kh√¥ng populated ho·∫∑c l∆∞u tr·ª±c ti·∫øp)
                  const productName = item.name || "Kh√¥ng x√°c ƒë·ªãnh";
                  const originalPrice = item.price || 0;
                  let discountedPrice = originalPrice;

                  // N·∫øu l√† item c√≥ discount
                  if (item.discount && item.discount > 0) {
                    discountedPrice = originalPrice * (1 - item.discount / 100);
                    // Kh√¥ng l√†m tr√≤n gi√° ƒë·ªÉ gi·ªØ nguy√™n gi√° g·ªëc trong c∆° s·ªü d·ªØ li·ªáu
                  }

                  // C·ªông v√†o t·ªïng ti·ªÅn
                  const lineTotal = discountedPrice * item.quantity;
                  subtotal += lineTotal;

                  itemsHtml += `
                      <tr>
                        <td style="padding: 10px; border-bottom: 1px solid #eee;">${productName}</td>
                        <td style="padding: 10px; border-bottom: 1px solid #eee; text-align: right;">${
                          item.quantity
                        }</td>
                        <td style="padding: 10px; border-bottom: 1px solid #eee; text-align: right;">
                          ${
                            item.discount && item.discount > 0
                              ? `<span style=\"text-decoration: line-through; color: #888;\">${originalPrice.toLocaleString(
                                  "vi-VN"
                                )}ƒë</span><br><span style=\"color: #ed174a; font-weight: bold;\">${discountedPrice.toLocaleString(
                                  "vi-VN"
                                )}ƒë</span>`
                              : `${originalPrice.toLocaleString("vi-VN")}ƒë`
                          }
                        </td>
                        <td style="padding: 10px; border-bottom: 1px solid #eee; text-align: right;">
                          ${lineTotal.toLocaleString("vi-VN")}ƒë
                        </td>
                      </tr>
                    `;
                }
              });

              // L∆∞u t·ªïng ti·ªÅn h√†ng ƒë·ªÉ s·ª≠ d·ª•ng sau
              calculatedTotal = subtotal;

              return itemsHtml;
            })()}
          </table>

          <!-- Order Summary -->
          <div style="background-color: #f8f9fa; padding: 15px; border-radius: 5px; margin: 15px 0; text-align: right;">
            <p style="margin: 5px 0;"><strong>T·ªïng ti·ªÅn h√†ng:</strong> ${calculatedTotal.toLocaleString(
              "vi-VN"
            )}ƒë</p>
            ${
              order.discountAmount > 0
                ? `<p style=\"margin: 5px 0;\"><strong>Gi·∫£m gi√° (voucher):</strong> -${order.discountAmount.toLocaleString(
                    "vi-VN"
                  )}ƒë</p>`
                : ""
            }
            <p style="margin: 5px 0; font-size: 18px; color: #ed174a;"><strong>T·ªïng thanh to√°n:</strong> ${(
              calculatedTotal - order.discountAmount
            ).toLocaleString("vi-VN")}ƒë</p>
          </div>

          <!-- Shipping Info -->
          <div style="background-color: #f8f9fa; padding: 15px; border-radius: 5px; margin: 15px 0;">
            <h3 style="color: #00aaff; margin-top: 0;">Th√¥ng tin giao h√†ng:</h3>
            <p style="margin: 5px 0;"><strong>Ng∆∞·ªùi nh·∫≠n:</strong> ${
              order.shippingAddress.fullName
            }</p>
            <p style="margin: 5px 0;"><strong>S·ªë ƒëi·ªán tho·∫°i:</strong> ${
              order.shippingAddress.phone
            }</p>
            <p style="margin: 5px 0;"><strong>ƒê·ªãa ch·ªâ:</strong> ${
              order.shippingAddress.address
            }, ${order.shippingAddress.ward}, ${
        order.shippingAddress.district
      }, ${order.shippingAddress.city}</p>
          </div>

          <p style="margin-top: 20px;">Ch√∫ng t√¥i s·∫Ω th√¥ng b√°o cho b·∫°n khi ƒë∆°n h√†ng ƒë∆∞·ª£c giao.</p>
          <p>N·∫øu b·∫°n c√≥ b·∫•t k·ª≥ c√¢u h·ªèi n√†o, vui l√≤ng li√™n h·ªá v·ªõi ch√∫ng t√¥i.</p>
          
          <!-- Footer -->
          <div style="margin-top: 30px; padding-top: 20px; border-top: 1px solid #eee; text-align: center;">
            <p style="margin-bottom: 5px;">Tr√¢n tr·ªçng,</p>
            <p style="margin-top: 0; color: #00aaff; font-weight: bold;">ƒê·ªôi ng≈© Bacola</p>
          </div>
        </div>
      `,
    };

    // Log th√¥ng tin t√≠nh to√°n ƒë·ªÉ debug n·∫øu c·∫ßn
    console.log(
      `T·ªïng ti·ªÅn h√†ng ƒë√£ t√≠nh to√°n: ${calculatedTotal.toLocaleString("vi-VN")}ƒë`
    );
    console.log(
      `Gi·∫£m gi√° (voucher): ${order.discountAmount.toLocaleString("vi-VN")}ƒë`
    );
    console.log(
      `T·ªïng thanh to√°n: ${(
        calculatedTotal - order.discountAmount
      ).toLocaleString("vi-VN")}ƒë`
    );

    await transporter.sendMail(mailOptions);
    console.log("Email x√°c nh·∫≠n ƒë∆°n h√†ng ƒë√£ ƒë∆∞·ª£c g·ª≠i th√†nh c√¥ng");
  } catch (error) {
    console.error("L·ªói khi g·ª≠i email x√°c nh·∫≠n ƒë∆°n h√†ng:", error);
  }
};
// T·∫°o ƒë∆°n h√†ng t·ª´ gi·ªè h√†ng
exports.createOrderFromCart = async (req, res) => {
  try {
    console.log("Request body:", JSON.stringify(req.body, null, 2));

    // Ki·ªÉm tra user
    if (!req.user || !req.user.id) {
      console.error("Kh√¥ng t√¨m th·∫•y th√¥ng tin ng∆∞·ªùi d√πng");
      return res.status(401).json({
        success: false,
        message: "Vui l√≤ng ƒëƒÉng nh·∫≠p ƒë·ªÉ ti·∫øp t·ª•c",
        error: "Unauthorized",
      });
    }

    const { shippingAddress, paymentMethod, note } = req.body;

    // Ki·ªÉm tra d·ªØ li·ªáu ƒë·∫ßu v√†o
    if (!shippingAddress || !paymentMethod) {
      console.error("Thi·∫øu th√¥ng tin b·∫Øt bu·ªôc:", {
        shippingAddress,
        paymentMethod,
      });
      return res.status(400).json({
        success: false,
        message: "Thi·∫øu th√¥ng tin b·∫Øt bu·ªôc",
        error: "Missing required fields",
      });
    }

    // Ki·ªÉm tra ƒë·ªãnh d·∫°ng shippingAddress
    if (
      !shippingAddress.fullName ||
      !shippingAddress.phone ||
      !shippingAddress.address ||
      !shippingAddress.city ||
      !shippingAddress.district ||
      !shippingAddress.ward
    ) {
      console.error("Thi·∫øu th√¥ng tin ƒë·ªãa ch·ªâ:", shippingAddress);
      return res.status(400).json({
        success: false,
        message: "Vui l√≤ng nh·∫≠p ƒë·∫ßy ƒë·ªß th√¥ng tin ƒë·ªãa ch·ªâ",
        error: "Invalid shipping address",
      });
    }

    // Chuy·ªÉn ƒë·ªïi userId th√†nh ObjectId
    let userId;
    try {
      userId = new mongoose.Types.ObjectId(req.user.id);
    } catch (error) {
      console.error("L·ªói khi chuy·ªÉn ƒë·ªïi userId:", error);
      return res.status(400).json({
        success: false,
        message: "ID ng∆∞·ªùi d√πng kh√¥ng h·ª£p l·ªá",
        error: "Invalid user ID",
      });
    }

    // L·∫•y gi·ªè h√†ng c·ªßa ng∆∞·ªùi d√πng
    const cart = await Cart.findOne({ user: userId }).populate("items.product");
    if (!cart || cart.items.length === 0) {
      console.error("Gi·ªè h√†ng tr·ªëng:", { userId });
      return res.status(400).json({
        success: false,
        message: "Gi·ªè h√†ng tr·ªëng",
        error: "Cart is empty",
      });
    }

    console.log("Cart items:", JSON.stringify(cart.items, null, 2));

    // Ki·ªÉm tra s·ªë l∆∞·ª£ng s·∫£n ph·∫©m c√≤n trong kho
    for (const item of cart.items) {
      console.log("Ki·ªÉm tra s·∫£n ph·∫©m:", item.product._id);
      const product = await Product.findById(item.product._id);
      if (!product) {
        console.error("S·∫£n ph·∫©m kh√¥ng t·ªìn t·∫°i:", {
          productId: item.product._id,
        });
        return res.status(400).json({
          success: false,
          message: `S·∫£n ph·∫©m kh√¥ng t·ªìn t·∫°i`,
          error: "Product not found",
        });
      }
      if (product.countInStock < item.quantity) {
        console.error("Kh√¥ng ƒë·ªß s·ªë l∆∞·ª£ng trong kho:", {
          productId: item.product._id,
          requested: item.quantity,
          available: product.countInStock,
        });
        return res.status(400).json({
          success: false,
          message: `S·∫£n ph·∫©m ${product.name} kh√¥ng ƒë·ªß s·ªë l∆∞·ª£ng trong kho`,
          error: "Insufficient stock",
        });
      }
    }

    // T√≠nh t·ªïng ti·ªÅn
    const totalAmount = cart.items.reduce(
      (total, item) => total + item.quantity * item.product.price,
      0
    );

    // T√≠nh to√°n gi·∫£m gi√° t·ª´ voucher n·∫øu c√≥
    let discountAmount = 0;
    if (req.body.voucher) {
      // Ki·ªÉm tra voucher ƒë√£ d√πng ch∆∞a
      const userVoucher = await UserVoucher.findOne({
        user: userId,
        voucher: req.body.voucher,
      });
      if (!userVoucher) {
        return res.status(400).json({
          success: false,
          message: "B·∫°n ch∆∞a l∆∞u voucher n√†y v√†o kho.",
        });
      }
      if (userVoucher.used) {
        return res.status(400).json({
          success: false,
          message: "Voucher n√†y ƒë√£ ƒë∆∞·ª£c s·ª≠ d·ª•ng.",
        });
      }
      const voucher = await Voucher.findById(req.body.voucher);
      if (!voucher) {
        return res.status(400).json({
          success: false,
          message: "Voucher kh√¥ng t·ªìn t·∫°i.",
        });
      }
      // Ki·ªÉm tra voucher ƒë√£ h·∫øt l∆∞·ª£t s·ª≠ d·ª•ng ch∆∞a
      if (voucher.usedCount >= voucher.usageLimit) {
        return res.status(400).json({
          success: false,
          message: "Voucher ƒë√£ h·∫øt l∆∞·ª£t s·ª≠ d·ª•ng.",
        });
      }
      if (voucher.discountType === "PERCENTAGE") {
        discountAmount = (totalAmount * voucher.discountValue) / 100;
        if (voucher.maxDiscountAmount > 0) {
          discountAmount = Math.min(discountAmount, voucher.maxDiscountAmount);
        }
      } else {
        discountAmount = voucher.discountValue;
      }
    }

    // T·∫°o ƒë∆°n h√†ng m·ªõi (ƒë·∫£m b·∫£o l·∫•y ·∫£nh t·ª´ product)
    const newOrder = new Order({
      user: userId,
      items: cart.items.map((item) => ({
        product: item.product._id,
        name: item.product.name,
        quantity: item.quantity,
        price: item.product.price,
        discount: item.product.discount || 0,
        image:
          item.product.images && item.product.images.length > 0
            ? item.product.images[0]
            : "",
      })),
      shippingAddress,
      paymentMethod,
      note,
      totalAmount: totalAmount,
      discountAmount: discountAmount,
      finalAmount: totalAmount - discountAmount,
      voucher: req.body.voucher || undefined,
    });

    // L∆∞u ƒë∆°n h√†ng
    await newOrder.save();

    // ƒê√°nh d·∫•u voucher ƒë√£ d√πng cho user n·∫øu c√≥ s·ª≠ d·ª•ng voucher
    if (req.body.voucher) {
      const userVoucher = await UserVoucher.findOne({
        user: userId,
        voucher: req.body.voucher,
      });
      if (userVoucher && !userVoucher.used) {
        await UserVoucher.findOneAndUpdate(
          { user: userId, voucher: req.body.voucher },
          { used: true }
        );
        // TƒÉng s·ªë l·∫ßn s·ª≠ d·ª•ng c·ªßa voucher
        await Voucher.findByIdAndUpdate(req.body.voucher, {
          $inc: { usedCount: 1 },
        });
      }
    }

    // N·∫øu l√† thanh to√°n COD, c·∫≠p nh·∫≠t tr·∫°ng th√°i ngay v√† populate s·∫£n ph·∫©m
    if (paymentMethod === "COD") {
      newOrder.status = "PROCESSING";
      newOrder.paymentStatus = "PENDING"; // V·∫´n l√† pending cho COD ƒë·∫øn khi nh·∫≠n h√†ng
      await newOrder.save();

      // Populate th√¥ng tin s·∫£n ph·∫©m tr∆∞·ªõc khi g·ª≠i v·ªÅ client
      const populatedOrder = await Order.findById(newOrder._id).populate(
        "items.product",
        "name price rating numReviews images discount"
      );

      // L·∫•y th√¥ng tin user ƒë·ªÉ g·ª≠i email
      const user = await User.findById(userId);
      if (user) {
        await sendOrderConfirmationEmail(populatedOrder, user);
      }

      // X√≥a gi·ªè h√†ng
      await Cart.findOneAndUpdate(
        { user: req.user._id },
        { $set: { items: [] } }
      );

      // ƒê·∫£m b·∫£o tr·∫£ v·ªÅ discount trong t·ª´ng item
      const orderData = populatedOrder.toObject();
      orderData.items = orderData.items.map((item) => ({
        ...item,
        discount:
          typeof item.discount === "number"
            ? item.discount
            : item.product?.discount || 0,
      }));

      return res.status(200).json({
        success: true,
        message: "T·∫°o ƒë∆°n h√†ng th√†nh c√¥ng",
        data: orderData,
      });
    }

    // N·∫øu l√† thanh to√°n MoMo
    if (paymentMethod === "MOMO") {
      // ... (chu·∫©n b·ªã th√¥ng tin MoMo)

      // L∆∞u th√¥ng tin ƒë∆°n h√†ng t·∫°m th·ªùi v√†o Map (gi·ªØ nguy√™n)
      // ...

      const extraData = Buffer.from(
        JSON.stringify({
          // ... (gi·ªØ nguy√™n extraData)
          dbOrderId: newOrder._id.toString(), // ƒê·∫£m b·∫£o dbOrderId ƒë∆∞·ª£c truy·ªÅn
        })
      ).toString("base64");

      // ... (t·∫°o momoRequest, signature)

      // G·ª≠i y√™u c·∫ßu thanh to√°n ƒë·∫øn MoMo
      const momoRes = await axios.post(momoConfig.endpoint, momoRequest);
      const momoData = momoRes.data;

      if (momoData.resultCode === 0) {
        // C·∫≠p nh·∫≠t momoOrderId cho ƒë∆°n h√†ng
        await Order.findByIdAndUpdate(newOrder._id, {
          momoOrderId: momoOrderId,
        });

        // L·∫•y th√¥ng tin user ƒë·ªÉ g·ª≠i email
        const user = await User.findById(userId);
        if (user) {
          const populatedOrder = await Order.findById(newOrder._id).populate(
            "items.product",
            "name price rating numReviews images discount"
          );
          await sendOrderConfirmationEmail(populatedOrder, user);
        }

        return res.status(200).json({
          success: true,
          message: "T·∫°o thanh to√°n th√†nh c√¥ng",
          data: {
            payUrl: momoData.payUrl,
            momoOrderId,
            orderId: newOrder._id,
          },
        });
      } else {
        // X√≥a ƒë∆°n h√†ng n·∫øu t·∫°o thanh to√°n th·∫•t b·∫°i
        await Order.findByIdAndDelete(newOrder._id);
        pendingOrders.delete(momoOrderId);

        return res.status(400).json({
          success: false,
          message: momoData.message || "T·∫°o thanh to√°n th·∫•t b·∫°i",
        });
      }
    }

    // ... (x·ª≠ l√Ω ph∆∞∆°ng th·ª©c thanh to√°n kh√¥ng h·ª£p l·ªá)
  } catch (error) {
    console.error("L·ªói khi t·∫°o ƒë∆°n h√†ng:", error);
    res.status(500).json({
      success: false,
      message: "L·ªói server",
      error: error.message,
    });
  }
};

// L·∫•y danh s√°ch ƒë∆°n h√†ng c·ªßa ng∆∞·ªùi d√πng
exports.getUserOrders = async (req, res) => {
  try {
    const orders = await Order.find({ user: req.user.id })
      .populate("items.product", "name image discount")
      .sort({ createdAt: -1 });

    res.json({
      success: true,
      data: orders,
    });
  } catch (error) {
    console.error("L·ªói khi l·∫•y danh s√°ch ƒë∆°n h√†ng:", {
      message: error.message,
      stack: error.stack,
      userId: req.user.id,
    });
    res.status(500).json({
      success: false,
      message: "L·ªói server",
      error: error.message,
    });
  }
};

// L·∫•y chi ti·∫øt ƒë∆°n h√†ng
exports.getOrderDetail = async (req, res) => {
  try {
    const order = await Order.findById(req.params.id)
      .populate("user", "name email")
      .populate("items.product", "name price image images discount");

    if (!order) {
      return res.status(404).json({
        success: false,
        message: "Kh√¥ng t√¨m th·∫•y ƒë∆°n h√†ng",
      });
    }

    // Ki·ªÉm tra quy·ªÅn truy c·∫≠p
    if (order.user._id.toString() !== req.user.id.toString()) {
      return res.status(403).json({
        success: false,
        message: "Kh√¥ng c√≥ quy·ªÅn truy c·∫≠p",
      });
    }

    // Log ƒë·ªÉ debug
    console.log("Order data:", JSON.stringify(order, null, 2));

    res.json({
      success: true,
      data: order,
    });
  } catch (error) {
    console.error("L·ªói khi l·∫•y chi ti·∫øt ƒë∆°n h√†ng:", {
      message: error.message,
      stack: error.stack,
      orderId: req.params.id,
      userId: req.user.id,
    });
    res.status(500).json({
      success: false,
      message: "L·ªói server",
      error: error.message,
    });
  }
};

// H·ªßy ƒë∆°n h√†ng
exports.cancelOrder = async (req, res) => {
  try {
    const order = await Order.findById(req.params.id);

    if (!order) {
      return res.status(404).json({
        success: false,
        message: "Kh√¥ng t√¨m th·∫•y ƒë∆°n h√†ng",
      });
    }

    // Ki·ªÉm tra quy·ªÅn truy c·∫≠p
    if (order.user.toString() !== req.user.id.toString()) {
      return res.status(403).json({
        success: false,
        message: "Kh√¥ng c√≥ quy·ªÅn truy c·∫≠p",
      });
    }

    // Ch·ªâ cho ph√©p h·ªßy ƒë∆°n h√†ng ·ªü tr·∫°ng th√°i pending
    if (order.status !== "pending") {
      return res.status(400).json({
        success: false,
        message: "Kh√¥ng th·ªÉ h·ªßy ƒë∆°n h√†ng ·ªü tr·∫°ng th√°i n√†y",
      });
    }

    // C·∫≠p nh·∫≠t tr·∫°ng th√°i ƒë∆°n h√†ng
    order.status = "cancelled";
    await order.save();

    // Ho√†n tr·∫£ s·ªë l∆∞·ª£ng s·∫£n ph·∫©m v√†o kho
    for (const item of order.items) {
      await Product.findByIdAndUpdate(item.product, {
        $inc: { countInStock: item.quantity },
      });
    }

    res.json({
      success: true,
      message: "ƒê∆°n h√†ng ƒë√£ ƒë∆∞·ª£c h·ªßy th√†nh c√¥ng",
    });
  } catch (error) {
    console.error("L·ªói khi h·ªßy ƒë∆°n h√†ng:", {
      message: error.message,
      stack: error.stack,
      orderId: req.params.id,
      userId: req.user.id,
    });
    res.status(500).json({
      success: false,
      message: "L·ªói server",
      error: error.message,
    });
  }
};

// Ki·ªÉm tra tr·∫°ng th√°i ƒë∆°n h√†ng MoMo
exports.checkOrderStatus = async (req, res) => {
  try {
    const { momoOrderId } = req.params;

    // Populate th√¥ng tin s·∫£n ph·∫©m (TH√äM 'images' v√† 'discount')
    const order = await Order.findOne({ momoOrderId: momoOrderId }).populate(
      "items.product",
      "name price rating numReviews images discount"
    );

    if (!order) {
      return res
        .status(404)
        .json({ success: false, message: "Kh√¥ng t√¨m th·∫•y ƒë∆°n h√†ng" });
    }

    // L·∫•y th√¥ng tin t·ª´ pendingOrders n·∫øu c√≥
    const pendingOrderInfo = pendingOrders.get(momoOrderId);

    // T·∫°o response data, ƒë·∫£m b·∫£o items ch·ª©a product v·ªõi images v√† discount
    const responseData = {
      orderId: order._id,
      status: order.status,
      paymentStatus: order.paymentStatus,
      items: order.items.map((item) => ({
        product: item.product
          ? {
              _id: item.product._id,
              name: item.product.name,
              price: item.product.price,
              rating: item.product.rating,
              numReviews: item.product.numReviews,
              discount: item.product.discount,
              // L·∫•y ·∫£nh ƒë·∫ßu ti√™n t·ª´ m·∫£ng images c·ªßa product ƒë√£ populate
              image:
                item.product.images && item.product.images.length > 0
                  ? item.product.images[0]
                  : "",
              images: item.product.images || [], // Truy·ªÅn c·∫£ m·∫£ng images n·∫øu c·∫ßn
            }
          : null, // Handle case where product might not be populated (shouldn't happen here)
        name: item.name, // name ƒë√£ l∆∞u trong order item
        quantity: item.quantity,
        price: item.price, // price ƒë√£ l∆∞u trong order item
        discount: typeof item.discount === "number" ? item.discount : undefined, // discount ƒë√£ l∆∞u trong order item (n·∫øu c√≥)
        // image: item.image // image ƒë√£ l∆∞u trong order item (·∫£nh ƒë·∫ßu ti√™n)
      })),
      totalAmount: order.totalAmount,
      shippingAddress: order.shippingAddress,
      paymentMethod: order.paymentMethod,
      note: order.note,
      createdAt: order.createdAt,
    };

    return res.status(200).json({
      success: true,
      message: "L·∫•y tr·∫°ng th√°i ƒë∆°n h√†ng th√†nh c√¥ng",
      data: responseData,
    });
  } catch (error) {
    console.error("L·ªói khi ki·ªÉm tra tr·∫°ng th√°i ƒë∆°n h√†ng:", error);
    return res.status(500).json({
      success: false,
      message: "L·ªói khi ki·ªÉm tra tr·∫°ng th√°i ƒë∆°n h√†ng",
      error: error.message,
    });
  }
};
